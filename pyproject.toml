[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fluent-mind-mcp"
version = "0.1.0"
description = "A comprehensive Model Context Protocol server for Flowise with full lifecycle management"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Fluent Mind MCP Team"}
]
keywords = ["mcp", "flowise", "ai", "chatflow", "model-context-protocol"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "fastmcp>=0.1.0",
    "httpx>=0.27.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.3.0",
    "mypy>=1.8.0",
]

[project.urls]
Homepage = "https://github.com/fluent-mind/fluent-mind-mcp"
Repository = "https://github.com/fluent-mind/fluent-mind-mcp"
Documentation = "https://github.com/fluent-mind/fluent-mind-mcp/blob/main/README.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
fluent_mind_mcp = ["py.typed"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "acceptance: Acceptance tests",
    "phase1: Phase 1 implementation tests",
    "slow: Slow running tests (e.g., model downloads)",
]

[tool.coverage.run]
source = ["src/fluent_mind_mcp"]
branch = true
omit = [
    "tests/*",
    "**/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.ruff]
line-length = 100
target-version = "py312"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # check for raise from None
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG",  # unused function arguments
    "S101", # use of assert
]

[tool.ruff.lint.isort]
known-first-party = ["fluent_mind_mcp"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

"""Request and response models for Flowise API interactions.

This module defines Pydantic models for API requests and responses,
including prediction responses, error responses, and CRUD request models.
"""

from typing import Any, Dict, Optional

from pydantic import BaseModel, Field, field_validator, model_validator

from fluent_mind_mcp.models.chatflow import ChatflowType


class PredictionResponse(BaseModel):
    """Result from chatflow execution.

    Represents the response from executing a chatflow prediction.

    Attributes:
        text: Response text generated by the chatflow
        question_message_id: Optional question message identifier
        chat_message_id: Optional response message identifier
        session_id: Optional conversation session identifier
    """

    model_config = {"populate_by_name": True}

    text: str = Field(..., min_length=1, description="Response text from chatflow")
    question_message_id: Optional[str] = Field(
        None, alias="questionMessageId", description="Question message identifier"
    )
    chat_message_id: Optional[str] = Field(
        None, alias="chatMessageId", description="Response message identifier"
    )
    session_id: Optional[str] = Field(
        None, alias="sessionId", description="Conversation session identifier"
    )


class ErrorResponse(BaseModel):
    """Standardized error response format.

    Provides consistent error reporting across all API operations.

    Attributes:
        error: Error type or code
        message: User-friendly error description
        details: Optional additional error context
    """

    error: str = Field(..., description="Error type/code")
    message: str = Field(..., description="User-friendly error message")
    details: Optional[Dict[str, Any]] = Field(None, description="Additional error context")


class CreateChatflowRequest(BaseModel):
    """Request model for creating a chatflow.

    Defines the structure for chatflow creation requests.

    Attributes:
        name: Chatflow name (1-255 characters)
        type: Chatflow type enum (defaults to CHATFLOW)
        flow_data: JSON string of workflow structure
        deployed: Initial deployment status (defaults to False)
    """

    name: str = Field(..., min_length=1, max_length=255, description="Chatflow name")
    type: ChatflowType = Field(ChatflowType.CHATFLOW, description="Chatflow type")
    flow_data: str = Field(..., min_length=1, description="JSON string of workflow")
    deployed: bool = Field(False, description="Initial deployment status")

    @field_validator("flow_data")
    @classmethod
    def validate_flow_data_size(cls, v: str) -> str:
        """Validate flow_data size is under 1MB.

        WHY: Prevent oversized payloads from being sent to API.
        """
        max_size = 1_048_576  # 1MB in bytes
        size = len(v.encode("utf-8"))
        if size > max_size:
            raise ValueError(f"flow_data size ({size} bytes) exceeds 1MB limit ({max_size} bytes)")
        return v

    @field_validator("flow_data")
    @classmethod
    def validate_flow_data_json(cls, v: str) -> str:
        """Validate flow_data is valid JSON.

        WHY: Ensures flow_data can be parsed as JSON.
        """
        import json

        try:
            parsed = json.loads(v)
            if not isinstance(parsed, dict):
                raise ValueError("flow_data must be a JSON object")
            if "nodes" not in parsed or "edges" not in parsed:
                raise ValueError("flow_data must contain 'nodes' and 'edges' keys")
        except json.JSONDecodeError as e:
            raise ValueError(f"flow_data must be valid JSON: {str(e)}")
        return v


class UpdateChatflowRequest(BaseModel):
    """Request model for updating a chatflow.

    Defines the structure for chatflow update requests.
    At least one optional field must be provided.

    Attributes:
        chatflow_id: Chatflow identifier to update
        name: Optional new name (1-255 characters)
        flow_data: Optional new workflow structure
        deployed: Optional new deployment status
    """

    chatflow_id: str = Field(..., min_length=1, description="Chatflow to update")
    name: Optional[str] = Field(None, min_length=1, max_length=255, description="New name")
    flow_data: Optional[str] = Field(None, min_length=1, description="New workflow structure")
    deployed: Optional[bool] = Field(None, description="New deployment status")

    @field_validator("flow_data")
    @classmethod
    def validate_flow_data_size(cls, v: Optional[str]) -> Optional[str]:
        """Validate flow_data size is under 1MB if provided.

        WHY: Prevent oversized payloads from being sent to API.
        """
        if v is not None:
            max_size = 1_048_576  # 1MB in bytes
            size = len(v.encode("utf-8"))
            if size > max_size:
                raise ValueError(f"flow_data size ({size} bytes) exceeds 1MB limit ({max_size} bytes)")
        return v

    @field_validator("flow_data")
    @classmethod
    def validate_flow_data_json(cls, v: Optional[str]) -> Optional[str]:
        """Validate flow_data is valid JSON if provided.

        WHY: Ensures flow_data can be parsed as JSON.
        """
        if v is not None:
            import json

            try:
                json.loads(v)
            except json.JSONDecodeError as e:
                raise ValueError(f"flow_data must be valid JSON: {str(e)}")
        return v

    @model_validator(mode="after")
    def validate_at_least_one_field(self) -> "UpdateChatflowRequest":
        """Validate that at least one optional field is provided.

        WHY: Update requests must specify at least one field to update.
        """
        if self.name is None and self.flow_data is None and self.deployed is None:
            raise ValueError("At least one of name, flow_data, or deployed must be provided")
        return self

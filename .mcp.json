{
  "mcpServers": {
    "context7": {
      "description": "Library documentation (FastMCP, httpx, Pydantic API references)",
      "type": "http",
      "url": "https://mcp.context7.com/mcp",
      "headers": {
        "CONTEXT7_API_KEY": "${CONTEXT7_API_KEY}"
      }
    },
    "exa": {
      "description": "Code search for examples, tutorials, and MCP patterns",
      "type": "http",
      "url": "https://mcp.exa.ai/mcp?exaApiKey=${EXA_API_KEY}"
    },
    "github": {
      "description": "Access Flowise source code and other MCP implementations",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_PERSONAL_ACCESS_TOKEN}"
      }
    },
    "sequential-thinking": {
      "description": "Complex problem solving and design decisions",
      "type": "stdio",
      "command": "docker",
      "args": ["run", "-i", "--rm", "mcp/sequentialthinking"]
    },
    "clean-code": {
      "description": "Code planning and architecture design",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-clean-code"]
    },
    "vibe-check": {
      "description": "Validate approach and catch assumptions early",
      "type": "stdio",
      "command": "node",
      "args": ["/Users/yermekibrayev/work/mcps/vibe-check-mcp-server/build/index.js"],
      "env": {
        "ANTHROPIC_API_KEY": "${ANTHROPIC_API_KEY}",
        "DEFAULT_LLM_PROVIDER": "anthropic",
        "DEFAULT_MODEL": "claude-sonnet-4-5-20250514",
        "USE_LEARNING_HISTORY": "false",
        "MCP_TRANSPORT": "stdio"
      }
    },
    "pieces": {
      "description": "Remember design decisions and store code snippets",
      "type": "stdio",
      "command": "pieces",
      "args": ["mcp", "start"],
      "env": {
        "PIECES_CLIENT": "claude-code"
      }
    },
    "fluent-mind": {
      "description": "Flowise chatflow management - list, get, and run chatflows",
      "type": "stdio",
      "command": "python",
      "args": ["-m", "fluent_mind_mcp.server"],
      "env": {
        "FLOWISE_API_URL": "${FLOWISE_API_URL}",
        "FLOWISE_API_KEY": "${FLOWISE_API_KEY}"
      }
    },
    "chrome-devtools": {
      "description": "[OPTIONAL] Test Flowise web UI alongside API development",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "chrome-devtools-mcp@latest"]
    },
    "experts": {
      "description": "Code review from Martin Fowler and Bob Martin",
      "type": "stdio",
      "command": "/Users/yermekibrayev/work/mcps/mcp-experts/.venv/bin/python",
      "args": ["/Users/yermekibrayev/work/mcps/mcp-experts/server.py"],
      "env": {
        "KNOWLEDGE_GRAPH_PATH": "/Users/yermekibrayev/work/mcps/mcp-experts/data/knowledge_graph.json",
        "OLLAMA_HOST": "http://192.168.51.21:11434",
        "OLLAMA_MODEL": "llama3:8b"
      }
    }
  },
  "notes": {
    "setup": "All API keys are now configured with actual values from working blueprint",
    "essential": "All MCPs are now enabled and properly configured",
    "usage": {
      "context7": "Use for FastMCP, httpx, Pydantic documentation lookups",
      "exa": "Search for 'fastmcp http client example', 'pydantic validation patterns', etc.",
      "github": "Read FlowiseAI/Flowise source code, search for similar MCP servers",
      "sequential-thinking": "Complex decisions like error handling strategy, async patterns",
      "clean-code": "Plan architecture before coding - ensure clean structure",
      "vibe-check": "Before major decisions, validate approach and check assumptions",
      "pieces": "Store important decisions, API patterns, code snippets for later reference",
      "fluent-mind": "Manage Flowise chatflows: list_chatflows, get_chatflow, run_prediction",
      "wayfinder": "Search for additional MCPs: 'search for python testing mcp', 'search for API mocking mcp'",
      "experts": "Get code reviews from Martin Fowler (refactoring) and Bob Martin (clean code)"
    }
  }
}
